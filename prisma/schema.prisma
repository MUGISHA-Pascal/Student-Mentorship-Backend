// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  writer      String
  dateCreated DateTime @default(now())
  image       String?
}

model User {
  id            String  @id @default(uuid())
  firstName     String
  lastName      String
  email         String  @unique
  dob           String
  gender        String // 'male', 'female', 'other'
  password      String
  role          ROLE
  filledForm    Boolean @default(false)
  approved      Boolean @default(false)
  filledProfile Boolean @default(false)

  coach   Coach?   @relation("UserCoach")
  student Student? @relation("UserStudent")
  sessions  SessionParticipant[]
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String?

  events         Event[]
  recentActivity RecentActivity[]
  metting        Meeting[]

  @@map("users")
}

enum ROLE {
  STUDENT
  MENTOR
  ADMIN
  EMPLOYER
  FAMILY
}

model OTP {
  id        Int      @id @default(autoincrement())
  otp       String
  secret    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  email     String

  @@map("otps")
}

model ConsultancyRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  career    String
  createdAt DateTime @default(now())
}

model EmailSubscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Coach {
  id             String           @id @default(uuid())
  userId         String           @unique // Foreign key to User
  user           User             @relation("UserCoach", fields: [userId], references: [id])
  bio            String?
  image          String?
  ratings        Rating[]         @relation("CoachRatings")
  courses        Course[]         @relation("CoachCourses")
  students       Student[]        @relation("CoachStudents")
  activities     Activity[]
  documents      Document[]       @relation("CoachDocuments")
  career         Career[]         @relation("CoachCareers")
  workExperience WorkExperience[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Course {
  id        String     @id @default(uuid())
  name      String
  description String?
  coaches   Coach[]    @relation("CoachCourses")
  students  Student[]  @relation("CourseStudents")
  documents Document[] @relation("CourseDocuments")
}

model Student {
  id       String    @id @default(uuid())
  userId   String    @unique // Foreign key to User
  user     User      @relation("UserStudent", fields: [userId], references: [id])
  courses  Course[]  @relation("CourseStudents")
  coaches  Coach[]   @relation("CoachStudents")
  status   Status    @default(WAITLIST)
  ratings  Rating[]  @relation("StudentRatings")
}

enum Status {
  WAITLIST
  APPROVED
  REJECTED
}


model Activity {
  id        String         @id @default(uuid())
  name      String
  createdAt DateTime       @default(now())
  status    ActivityStatus
  image     String?
  coach     Coach          @relation(fields: [coachId], references: [id])
  coachId   String
  date      DateTime
}

enum ActivityStatus {
  UPCOMING
  ONGOING
  DONE
}

model Document {
  id         String   @id @default(uuid())
  coachId    String
  courseId   String
  fileName   String
  fileType   String
  fileSize   Int
  uploadDate DateTime @default(now())
  fileUrl    String
  coach      Coach    @relation(fields: [coachId], references: [id], name: "CoachDocuments")
  course     Course   @relation(fields: [courseId], references: [id], name: "CourseDocuments", onDelete: Cascade)
}

model Career {
  id          String   @id @default(uuid())
  title       String
  description String
  coaches     Coach[]  @relation("CoachCareers")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkExperience {
  id        String    @id @default(uuid())
  position  String
  company   String
  startDate DateTime
  endDate   DateTime?
  coachId   String
  coach     Coach     @relation(fields: [coachId], references: [id])
  createdAt DateTime  @default(now())
}

model Rating {
  id        Int      @id @default(autoincrement())
  coachId   String // The coach being rated
  studentId String // The student giving the rating
  rating    Float // Rating score (e.g., 1-5)
  createdAt DateTime @default(now()) // When the rating was given
  coach     Coach    @relation("CoachRatings", fields: [coachId], references: [id]) // Relation to Coach
  student   Student  @relation("StudentRatings", fields: [studentId], references: [id]) // Corresponding relation
}

// I Muhammad Hasim contribution to the schema starts here
// Event Schema
model Event {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  time      String
  status    String // Available or unavailable
  userId    String // Should match the type of User.id
  user      User     @relation(fields: [userId], references: [id]) // Correct relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// RecentActivities Schema
model RecentActivity {
  id        Int      @id @default(autoincrement())
  userId    String
  activity  String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// Meeting Schema
model Meeting {
  id        Int      @id @default(autoincrement())
  userId    String
  subject   String
  date      DateTime
  time      String
  status    String // "available", "unavailable"
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// I Muhammad Hasim contribution ends here...
model Session {
  id             String               @id @default(cuid())
  title          String
  startTime      DateTime
  endTime        DateTime
  status         SessionStatus @default(SCHEDULED)
  participants   SessionParticipant[]
  messages       Message[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  timestamp  DateTime @default(now())
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id])
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id])
}

model SessionParticipant {
  id         String   @id @default(uuid())
  userId     String
  sessionId  String
  user       User     @relation(fields: [userId], references: [id])
  session    Session  @relation(fields: [sessionId], references: [id])
}

enum SessionStatus {
  SCHEDULED
  ONGOING
  COMPLETED
}