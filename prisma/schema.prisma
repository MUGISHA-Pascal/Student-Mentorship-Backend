generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  description String
  dateCreated DateTime @default(now())
  image       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model User {
  id             String               @id @default(uuid())
  firstName      String
  lastName       String
  email          String               @unique
  dob            String
  gender         String
  password       String
  role           ROLE
  filledForm     Boolean              @default(false)
  approved       Boolean              @default(false)
  filledProfile  Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  admin          Admin?               @relation("UserAdmin")
  coach          Coach?               @relation("UserCoach")
  events         Event[]
  metting        Meeting[]
  messages       Message[]
  recentActivity RecentActivity[]
  sessions       SessionParticipant[]
  student        Student?             @relation("UserStudent")
  blogs          Blog[]

  @@map("users")
}

model OTP {
  id        Int      @id @default(autoincrement())
  otp       String
  secret    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  email     String

  @@map("otps")
}

model ConsultancyRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  career    String
  createdAt DateTime @default(now())
}

model EmailSubscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Coach {
  id             String           @id @default(uuid())
  userId         String           @unique
  bio            String?
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  activities     Activity[]
  user           User             @relation("UserCoach", fields: [userId], references: [id], onDelete: Cascade)
  cv             CoachCV[]        @relation("CoachDocuments")
  documents      Document[]       @relation("CoachDocuments")
  ratings        Rating[]         @relation("CoachRatings")
  workExperience WorkExperience[]
  career         Career[]         @relation("CoachCareers")
  courses        Course[]         @relation("CoachCourses")
  students       Student[]        @relation("CoachStudents")
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserAdmin", fields: [userId], references: [id])
}

model Course {
  id          String     @id @default(uuid())
  name        String
  description String?
  documents   Document[] @relation("CourseDocuments")
  coaches     Coach[]    @relation("CoachCourses")
  students    Student[]  @relation("CourseStudents")
}

model Student {
  id                  String       @id @default(uuid())
  userId              String       @unique
  status              Status       @default(WAITLIST)
  bio                 String?
  educationLevel      String?
  image               String?
  currentEnrollmentId String?
  enrollments         Enrollment[] @relation("StudentEnrollments")
  ratings             Rating[]     @relation("StudentRatings")
  user                User         @relation("UserStudent", fields: [userId], references: [id], onDelete: Cascade)
  coaches             Coach[]      @relation("CoachStudents")
  courses             Course[]     @relation("CourseStudents")
}

model Activity {
  id        String         @id @default(uuid())
  name      String
  createdAt DateTime       @default(now())
  status    ActivityStatus
  image     String?
  coachId   String
  date      DateTime
  coach     Coach          @relation(fields: [coachId], references: [id])
}

model CoachCV {
  id         String   @id @default(uuid())
  coachId    String
  fileName   String
  fileType   String
  fileSize   Int
  uploadDate DateTime @default(now())
  fileUrl    String
  coach      Coach    @relation("CoachDocuments", fields: [coachId], references: [id])
}

model Document {
  id         String   @id @default(uuid())
  coachId    String
  courseId   String
  fileName   String
  fileType   String
  fileSize   Int
  uploadDate DateTime @default(now())
  fileUrl    String
  coach      Coach    @relation("CoachDocuments", fields: [coachId], references: [id])
  course     Course   @relation("CourseDocuments", fields: [courseId], references: [id], onDelete: Cascade)
}

model Career {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cohorts     Cohort[]
  coaches     Coach[]  @relation("CoachCareers")
}

model WorkExperience {
  id        String    @id @default(uuid())
  position  String
  company   String
  startDate DateTime
  endDate   DateTime?
  coachId   String
  createdAt DateTime  @default(now())
  coach     Coach     @relation(fields: [coachId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  coachId   String
  studentId String
  rating    Float
  createdAt DateTime @default(now())
  coach     Coach    @relation("CoachRatings", fields: [coachId], references: [id])
  student   Student  @relation("StudentRatings", fields: [studentId], references: [id])
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime
  time      String
  status    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model RecentActivity {
  id        Int      @id @default(autoincrement())
  userId    String
  activity  String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Meeting {
  id        Int      @id @default(autoincrement())
  userId    String
  subject   String
  date      DateTime
  time      String
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id           String               @id @default(cuid())
  title        String
  startTime    DateTime
  endTime      DateTime
  status       SessionStatus        @default(SCHEDULED)
  messages     Message[]
  participants SessionParticipant[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  timestamp DateTime @default(now())
  senderId  String
  sessionId String
  sender    User     @relation(fields: [senderId], references: [id])
  session   Session  @relation(fields: [sessionId], references: [id])
}

model SessionParticipant {
  id        String  @id @default(uuid())
  userId    String
  sessionId String
  session   Session @relation(fields: [sessionId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Cohort {
  id          String       @id @default(uuid())
  name        String
  careerId    String
  startDate   DateTime
  endDate     DateTime
  status      CohortStatus @default(UPCOMING)
  capacity    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  career      Career       @relation(fields: [careerId], references: [id])
  enrollments Enrollment[]

  @@index([careerId])
}

model Enrollment {
  id         String           @id @default(uuid())
  studentId  String
  cohortId   String
  enrolledAt DateTime         @default(now())
  status     EnrollmentStatus @default(PENDING)
  cohort     Cohort           @relation(fields: [cohortId], references: [id])
  student    Student          @relation("StudentEnrollments", fields: [studentId], references: [id])

  @@unique([studentId, cohortId])
  @@index([studentId])
  @@index([cohortId])
}

enum ROLE {
  STUDENT
  MENTOR
  ADMIN
  EMPLOYER
  FAMILY
}

enum Status {
  WAITLIST
  APPROVED
  REJECTED
}

enum ActivityStatus {
  UPCOMING
  ONGOING
  DONE
}

enum SessionStatus {
  SCHEDULED
  ONGOING
  COMPLETED
}

enum CohortStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}
