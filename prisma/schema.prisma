// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  dob       String
  gender    String // 'male', 'female', 'other'
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model OTP {
  id        Int      @id @default(autoincrement())
  otp       String
  secret    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  email     String

  @@map("otps")
}

model ConsultancyRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  career    String
  createdAt DateTime @default(now())
}

model EmailSubscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Coach {
  id         String     @id @default(uuid())
  name       String
  image      String?
  rating     Float
  courses    Course[]   @relation("CoachCourses")
  students   Student[]  @relation("CoachStudents")
  activities Activity[]
  documents  Document[] @relation("CoachDocuments")
}

model Course {
  id        String     @id @default(uuid())
  name      String
  coaches   Coach[]    @relation("CoachCourses")
  students  Student[]  @relation("CourseStudents")
  documents Document[] @relation("CourseDocuments")
}

model Student {
  id       String    @id @default(uuid())
  name     String
  courses  Course[]  @relation("CourseStudents")
  coaches  Coach[]   @relation("CoachStudents")
  status   Status    @default(WAITLIST)
  messages Message[] @relation("StudentMessages")
}

enum Status {
  WAITLIST
  APPROVED
  REJECTED
}

model Message {
  id        String  @id @default(uuid())
  studentId String
  content   String
  student   Student @relation("StudentMessages", fields: [studentId], references: [id])
}

model Activity {
  id      String         @id @default(uuid())
  name    String
  date    DateTime
  status  ActivityStatus
  image   String?
  coach   Coach          @relation(fields: [coachId], references: [id])
  coachId String
}

enum ActivityStatus {
  UPCOMING
  ONGOING
  DONE
}

model Document {
  id         String   @id @default(uuid())
  coachId    String
  courseId   String
  fileName   String
  fileType   String
  fileSize   Int
  uploadDate DateTime @default(now())
  fileUrl    String
  coach      Coach    @relation(fields: [coachId], references: [id], name: "CoachDocuments")
  course     Course   @relation(fields: [courseId], references: [id], name: "CourseDocuments")
}
